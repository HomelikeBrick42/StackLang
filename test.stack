5 42 6
over(2 1)
print_int call
print_int call
print_int call

const("int_pair" int int)

proc_type(int_pair) -> (int)
print_type call

34
proc(int) -> (proc_type(int) -> (int)) {
    var("value")
    proc(int) -> (int) {
        get("value") load add
    }
}
call
35 swap call
print_int call

"hello"
print_string call

const("add_26" proc(int ref) -> () {
    dup load
    26 add
    swap
    store
})

5 var("test")
get("test") dup add_26 call
load print_int call

proc() -> (proc_type() -> (int)) {
    0 var("counter")
    proc() -> (int) {
        get("counter")
        dup load 1 add
        dup over(2) store
    }
} call
dup call print_int call
dup call print_int call
dup call print_int call
dup call print_int call
dup call print_int call
drop

if 5 10 greater {
    42
} else {
    45
}
print_int call

0 while dup 10 less {
    dup print_int call
    1 add
}

const("factorial" proc(int) -> (int) {
    dup 0 1 sub greater assert

    var("n")
    1
    var("counter")
    1
    while get("counter" "n") load swap load 1 sub greater {
        get("counter") load mul
        get("counter") dup load 1 add swap store
    }
})

6 factorial call print_int call

"What is your name? " print_string call
"Hello, " read_line call concat
print_string call println call
